CLOUD FIRESTORE

------------------------>
MEMILIH DATABASE 
- realtime database
  - cocok untuk chat dan notifikasi progress
  - latency rendah > cocok syncronisasi realtime > lebih mahal 
  - untuk data kecil, query sederhana, realtime, notifikasi kehadiran online-offline
  - makin banyak data makin lambat
- cloud firestore
  - cocok untuk data besar dan scalable
  - terbaru > lebih lengkap > queri lebih baik > seach lebih cepat > lebih murah > scalable lebih cepat
  - untuk data besar, query compleks, tidak relatime
  - makin banyak data di temukan makin lambat
- semua data base sebenarnya memiliki perbedaan yang tipis saja sehingga di sarankan
  memilih cloud firestore karena fitur lebih baru daan lebih lengkap, serta integrasi dengan GCP lebih mudah
  - semua bisa efisien dengan membaca sekali (tidak realtime)
  - 

------------------------>
CREATE DB 
- di console > login > pilih atau buat project > pilih tab cloud firestore > create  started > scurity role mode pengujian
  (bisa setting waktu 30 hr ke depan dan bisa di edit) > pilih lokasi asia southeast2 > 

------------------------>
KOLEKSI DOKUMENT FIELD
- koleksi mirip tabel > dia hanya berisi dokument.tidak untuk subkoleksi atau K:V > koleksi tidak perlu di buat
  karena otomotis di buat saat documen di buat dan oto matis di hapus saat semua data tidak ada
- dokument mirip row > karena row maka harus uniq (memiliki ID)
- kolom mirip field 
-----
- kolom dalam dokument tidak ada aturan harus sama > tapi sama di anjurkan karena memudahkan penyusunan query
- referensi > seperti akses folder aja sesuai koleksi/id/subKoleksi/id
    doc(db, 'users/id/nama' );
    doc(db, 'users, id, nama' );
    collection(db, 'users');
    
------------------------>
SDK CLOUD FIREBASE WEB 
- npm install firebase@9.6.10 --save

import { initializeApp } from "firebase/app";
import { getFirestore } from "firebase/firestore";
import { getFirestore } from "firebase/firestore/lite"; // atau pakai ini untuk CRUD dasar saja

import { initializeApp } from "firebase/app";
import { getFirestore} } from "firebase/firestore";

const firebaseConfig = {
    // ...
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

copas aja dari dokumentasi di index.html

------------------------>
TULIS DATA 
copas aja ini:

import { collection, addDoc } from "firebase/firestore";

try {
  const docRef = await addDoc(collection(db, "users"), {      // selama referensinya disini maka dokument akan diisi di jalur ini
    first: "Ada",                                             // pada pengisian berikut2nya meski K:V tidak sama (berbeda) boleh saja
    last: "Lovelace",
    born: 1815
  });
  console.log("Document written with ID: ", docRef.id);       // .id boleh di isi "key" nya yang ada, coba
} catch (e) {
  console.error("Error adding document: ", e);
}

------------------------>
BACA DATA 

import { collection, getDocs } from "firebase/firestore";

const querySnapshot = await getDocs(collection(db, "users"));
querySnapshot.forEach((doc) => {
  console.log(`${doc.id} => ${doc.data()}`);      // boleh tambah key (.nama) = console.log(`${doc.id} => ${doc.data().nama}`); 
});




